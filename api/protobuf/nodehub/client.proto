syntax = "proto3";

package nodehub;

option go_package = "github.com/joyparty/nodehub/proto/nh";

// 客户端上行消息
// 请求会被网关转换为grpc请求转发到内部服务
message Request {
	// id应该按照发送顺序自增长
	// 网关会在每个request对应的reply.request_id内原样返回这个值
	uint32 id = 1;

	// 服务ID，对应内部节点的每种grpc服务
	// 内部节点在注册服务发现时，会将服务ID注册到etcd中
	// 网关根据service字段将请求转发到对应的内部服务
	int32 service_code = 2;

	// grpc方法名，大小写敏感，例如: SayHello
	string method = 3;

	// grpc方法对应的protobuf message序列化之后的数据
	// 具体对应关系需要自行查看grpc服务的protobuf文件
	bytes data = 4;

	// 节点ID
	// 如果有值，网关会把本次以及后续请求转发到指定的节点，直到指定了新的node id
	// 仅仅在有状态服务的allocation配置为client时有效
	string node_id = 5;

	// 是否需要网关返回response
	bool no_reply = 6;

	// 如果不设置值，网关会以并发的方式处理这个请求
	// 如果设置了值，网关会严格按照接收顺序处理同一个流的所有的请求
	// 使用了流以后，性能会受到一定影响，因为网关会等待上一个请求的返回之后才会处理下一个请求
	// 不同客户端以及不同的流之间不会互相影响
	// 例如：stream = "stream1"，表示这个请求属于stream1这个流
	string stream = 7;
}

// 来自服务器端下行的消息
message Reply {
	// 触发此次请求的request_id
	// 网关会自动给这个字段赋值
	// 如果是服务器端主动下发，request_id = 0
	uint32 request_id = 1;

	// 服务ID，对应内部节点的每种grpc服务
	// 标识这个消息来自于哪个内部服务
	// grpc调用返回结果，网关会自动给这个字段赋值
	// 如果是服务器端主动下发，需要自行赋值
	// service_code = 0，表示这个消息来自于网关本身
	int32 service_code = 2;

	// 消息类型代码
	// code = 0，表示这是google.protobuf.Empty类型的空消息
	int32 code = 3;

	// 下行protobuf message序列化之后的数据
	// 客户端需要根据code字段判断具体反序列化成哪个protobuf message
	bytes data = 4;
}
